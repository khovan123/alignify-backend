# ==============================================================================
# Docker Compose for Alignify Backend Production Environment
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # Alignify Backend Application (Production)
  # ==============================================================================
  alignify-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: alignify-backend-prod
    ports:
      - "8080:8080"
    environment:
      # Spring configuration
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8080
      
      # Security hardening
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=when_authorized
      
      # MongoDB configuration (use external MongoDB service in production)
      - SPRING_DATA_MONGODB_URI=${MONGODB_URI}
      - SPRING_DATA_MONGODB_DATABASE=${MONGODB_DATABASE}
      
      # JVM configuration for production
      - JAVA_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC
      
      # Application secrets (use Docker secrets or external secret management)
      - JWT_SECRET=${JWT_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
      - PAYOS_API_KEY=${PAYOS_API_KEY}
      - PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}
    volumes:
      - app-logs:/app/logs:rw
      - app-tmp:/app/tmp:rw
    networks:
      - alignify-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # ==============================================================================
  # Nginx Reverse Proxy (Production)
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: alignify-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - alignify-backend
    networks:
      - alignify-prod-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==============================================================================
# Networks
# ==============================================================================
networks:
  alignify-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  app-logs:
    driver: local
  app-tmp:
    driver: local
  nginx-cache:
    driver: local